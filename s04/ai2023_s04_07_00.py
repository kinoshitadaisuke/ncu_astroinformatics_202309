#!/usr/pkg/bin/python3.10

#
# Time-stamp: <2023/10/01 08:02:00 (CST) daisuke>
#

# importing argparse module
import argparse

# importing pathlib module
import pathlib

# importing sys module
import sys

# importing numpy module
import numpy

# constructing a parser object
descr  = 'generating random numbers of Gaussian distribution'
parser = argparse.ArgumentParser (description=descr)

# adding arguments
parser.add_argument ('-o', '--output', default='output.png', \
                     help='output file name (default: output.data)')
parser.add_argument ('-m', '--mean', type=float, default=0.0, \
                     help='mean of Gaussian distribution (default: 0.0)')
parser.add_argument ('-s', '--stddev', type=float, default=1.0, \
                     help='standard deviation of Gaussian dist. (default: 1.0)')
parser.add_argument ('-n', '--number', type=int, default=1000, \
                     help='number of random numbers (default: 1000)')

# parsing arguments
args = parser.parse_args ()

# parameters
file_output = args.output
mean        = args.mean
stddev      = args.stddev
n           = args.number

# making a pathlib object for output file
path_output = pathlib.Path (file_output)

# check of existence of output file
if (path_output.exists ()):
    # printing a message
    print (f'ERROR: output file "{file_output}" exists!')
    # stopping the script
    sys.exit (0)

# generating random numbers
rng  = numpy.random.default_rng ()
dist = rng.normal (loc=mean, scale=stddev, size=n)

# printing generated random numbers
with open (file_output, 'w') as fh:
    # writing header
    fh.write (f'#\n')
    fh.write (f'# a set of random numbers generated by Numpy\n')
    fh.write (f'#\n')
    fh.write (f'# input parameters\n')
    fh.write (f'#\n')
    fh.write (f'#  output file name         = "{file_output}"\n')
    fh.write (f'#  mean value               = {mean}\n')
    fh.write (f'#  standard deviation       = {stddev}\n')
    fh.write (f'#  number of random numbers = {n}\n')
    fh.write (f'#\n')
    # writing data
    for rn in dist:
        fh.write (f'{rn}\n')
